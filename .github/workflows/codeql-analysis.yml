# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
name: "CodeQL"

on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    - cron: '0 3 * * 6'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # Override automatic language detection by changing the below list
        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
        language: ['cpp']
        # Learn more...
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    # - run: git checkout HEAD^2
    #  if: ${{ github.event_name == 'pull_request' }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file. 
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language
    - name: "build"
      run: |
       mkdir -p build && cd build
       wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh 
       sudo ./llvm.sh 12
       wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
       sudo apt-get update
       sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main"
       sudo apt update
       sudo apt install clang-12 clang-tools-12 cppcheck 
       pip3 install -U pip setuptools 
       pip3 install conan
       sudo ln -s ~/.local/bin/conan /usr/bin/conan
       conan profile new clang_profile --detect
       conan profile update settings.compiler=clang clang_profile
       conan profile update settings.compiler.version=12 clang_profile
       conan profile update settings.compiler.libcxx=libstdc++11 clang_profile
       conan  install .. --profile clang_profile --build=missing  
       scan-build-12 --use-cc=clang-12 --use-c++=clang++-12 cmake -DENABLE_CLANG_TIDY=True -DENABLE_CPPCHECK=True ..
       scan-build-12 --use-cc=clang-12 --use-c++=clang++-12 cmake --build . 2>&1 | tee static_analyzer_output.txt
      env:
        CC: clang-12
        CXX: clang++-12
    - name: Archive code static analysis results
      uses: actions/upload-artifact@v2
      with:
        name: static_analyzer_output
        path: build/static_analyzer_output.txt 
    - name: Archive Scan-build
      uses: actions/upload-artifact@v2
      with:
        name: scan-build
        path: /tmp/scan-build*



    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
